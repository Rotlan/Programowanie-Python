1.Write a Python program to find those numbers which are divisible by 7 and multiples of 5, between 1500 and 2700 (both included).

result = [num for num in range(1500, 2701) if num % 7 == 0 and num % 5 == 0]
print(result)

2.Write a Python program to convert temperatures to and from Celsius and Fahrenheit.
def celsius_to_fahrenheit(celsius):
    return celsius * 9/5 + 32

def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * 5/9

celsius = 60
fahrenheit = 45

print(f"{celsius}°C is {celsius_to_fahrenheit(celsius)} in Fahrenheit")
print(f"{fahrenheit}°F is {fahrenheit_to_celsius(fahrenheit)} in Celsius")

3.Write a Python program to guess a number between 1 and 9.
import random

target_number = random.randint(1, 9)
guess = None

while guess != target_number:
    guess = int(input("Guess a number between 1 and 9: "))
    if guess < target_number:
        print("Too low, try again!")
    elif guess > target_number:
        print("Too high, try again!")

print("Well guessed!")

4.Write a Python program to construct the following pattern, using a nested for loop.
for i in range(1, 6):
    print('* ' * i)
for i in range(4, 0, -1):
    print('* ' * i)

5.Write a Python program that accepts a word from the user and reverses it.
word = input("Enter a word: ")
reversed_word = word[::-1]
print("Reversed word:", reversed_word)


6.Write a Python program to count the number of even and odd numbers in a series of numbers.
numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)
even_count = sum(1 for num in numbers if num % 2 == 0)
odd_count = len(numbers) - even_count
print("Number of even numbers:", even_count)
print("Number of odd numbers:", odd_count)


7.Write a Python program that prints each item and its corresponding type from the following list.
datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12], {"class":'V', "section":'A'}]

for item in datalist:
    print(f"Item: {item}, Type: {type(item)}")

8.Write a Python program that prints all the numbers from 0 to 6 except 3 and 6.
for num in range(7):
    if num == 3 or num == 6:
        continue
    print(num, end=' ')


9.Write a Python program to get the Fibonacci series between 0 and 50.
 a, b = 0, 1
while a < 50:
    print(a, end=' ')
    a, b = b, a + b

10.Write a Python program that iterates the integers from 1 to 50. For multiples of three print "Fizz" instead of the number and for multiples of five print "Buzz". For numbers that are multiples of three and five, print "FizzBuzz".
for i in range(1, 51):
    if i % 3 == 0 and i % 5 == 0:
        print("FizzBuzz")
    elif i % 3 == 0:
        print("Fizz")
    elif i % 5 == 0:
        print("Buzz")
    else:
        print(i)

11.Write a Python program that takes two digits m (row) and n (column) as input and generates a two-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.
m = int(input("Enter the number of rows: "))
n = int(input("Enter the number of columns: "))

matrix = [[i*j for j in range(n)] for i in range(m)]

print("Resulting 2D array:")
for row in matrix:
    print(row)

12.Write a Python program that accepts a sequence of lines (blank line to terminate) as input and prints the lines as output (all characters in lower case).
lines = []

print("Enter lines of text (empty line to terminate):")
while True:
    line = input()
    if not line:
        break
    lines.append(line.lower())

print("Output:")
for line in lines:
    print(line)

13.Write a Python program that accepts a sequence of comma-separated 4-digit binary numbers as its input. The program will print the numbers that are divisible by 5 in a comma-separated sequence.
binary_numbers = input("Enter comma-separated 4-digit binary numbers: ").split(',')

result = [num for num in binary_numbers if int(num, 2) % 5 == 0]

print("Numbers divisible by 5:", ', '.join(result))

14.Write a Python program that accepts a string and calculates the number of digits and letters.
text = input("Enter a string: ")

digits = sum(1 for char in text if char.isdigit())
letters = sum(1 for char in text if char.isalpha())

print("Letters:", letters)
print("Digits:", digits)

15.Write a Python program to check the validity of passwords input by users.

import re

def password_check(password):
    if (len(password) < 6 or len(password) > 12):
        return False
    elif not re.search("[a-z]", password):
        return False
    elif not re.search("[0-9]", password):
        return False
    elif not re.search("[A-Z]", password):
        return False
    elif not re.search("[$#@]", password):
        return False
    else:
        return True

passwords = ["ABd1234@1", "a F1#", "2w3E*", "2We3345"]
for password in passwords:
    print(f"{password}: {password_check(password)}")
16.Write a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence.
result = [str(num) for num in range(100, 401) if all(int(digit) % 2 == 0 for digit in str(num))]
print(",".join(result))


17.Write a Python program to print the alphabet pattern 'A'.
size = 7

pattern = []

for i in range(size):
    row = [' '] * size
    if i == 0 or i == size // 2:
        row = ['*'] * size
    else:
        row[0] = '*'
        row[size - 1] = '*'
    pattern.append(''.join(row))

for row in pattern:
    print(row)


18.Write a Python program to print the alphabet pattern 'D'.
for i in range(7):
    if i == 0 or i == 6:
        print("**** ")
    elif i == 1 or i == 5:
        print("*   *")
    else:
        print("*    ")

19.Write a Python program to print the alphabet pattern 'E'.
for i in range(7):
    if i == 0 or i == 6:
        print("*****")
    elif i == 3:
        print("*****")
    else:
        print("*    ")

20.Write a Python program to print the alphabet pattern 'G'.
size = 7

pattern = []

for i in range(size):
    row = [' '] * size
    if i == 0 or i == size - 1:
        row = ['*'] * size
    elif i == size // 2:
        row = ['*'] + [' '] * (size - 3) + ['*'] * 2
    elif i > size // 2:
        row[0] = '*'
        row[size - 1] = '*'
    else:
        row[0] = '*'
    pattern.append(''.join(row))

for row in pattern:
    print(row)

